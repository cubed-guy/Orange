// contains all builtin functions, helper functions
// and useful container types

extern free: &any ptr
extern puts: str s

fn print T: T arg
	T._print(arg)
end

fn println T: T arg
	T._print(arg)
	puts("")
end

enum bool
	let 0 as false void
	let 1 as true void

	fn _print: bool self
		if self.true
			print("True")
		elif self.false
			print("False")
		else
			print("bool.Undefined")
		end
	end
end

type UnboundArr T
	let _ptr &T

	fn _getref: UnboundArr T self, int n -> &T
		let scaled_index int
		scaled_index = n * T:size
		return self._ptr + scaled_index
	end

	fn _getitem: UnboundArr T self, int n -> T
		let out &T
		out = &self[n]
		return *out
	end

	fn _setitem: UnboundArr T self, T value, int n
		let ref &T
		ref = &self[n]
		*ref = value
	end

	fn alloc: &UnboundArr T self, int n
		if n == 0
			self._ptr = T:null
			return
		end

		self._ptr = alloc(T, n)

		if self._ptr == T:null
			println("Alloc failed without exceptions")
			return
		end
	end
end

type Arr T
	let _arr UnboundArr T
	let len int

	fn _getref: &Arr T self, int n -> &T
		return &self._arr[n]
	end

	fn _getitem: &Arr T self, int n -> T
		let out &T
		out = &self._arr[n]
		return *out
	end

	fn _setitem: &Arr T self, T value, int n
		let ref &T
		ref = &self._arr[n]
		*ref = value
	end

	// TODO: return Arr T
	fn alloc: &Arr T self, int len
		UnboundArr T.alloc(&self._arr, len)
		if self._arr._ptr == T:null
			self.len = 0
			return
		end
		self.len = len
	end

	fn _print: &Arr T self
		let i int
		i = 1
		print('[')
		let el T
		if self.len
			el = self[0]
			print(el)
		end
		while self.len > i
			el = self[i]
			print(", ")
			print(el)
			i = i + 1
		end
		print(']')

	end

	// // These are all equivalent
	// arr := arr:type.alloc(34)
	// arr := Arr T.alloc(34)
	// Arr T.alloc(arr, 34)
end

type Dict K V
	let cap int
	let keys UnboundArr K
	let values UnboundArr V
	let used int

	// So, this is a constructor? And it works? And it's in my language? Crazy!
	fn new: int cap -> Dict K V
		let out Dict K V


		out.cap = cap
		out.values:type.alloc(&out.values, cap)
		out.keys:type.alloc(&out.keys, cap)
		out.used = 0

		let i int
		i = 0
		while i < cap
			out.keys[i] = K::null  // For strings, "" is thus not considered a valid key. TODO: custom strcmp
			// out.values[i] = V::null
			i = i + 1
		end

		return out
	end

	fn index: &Dict K V dict, K key -> int
		if dict == Dict K V:null
			return 0-1
		end

		let hash u64
		hash = K._hash(key)

		let cap int
		cap = dict.cap

		let index int
		index = hash % cap

		// printstr("Key pointer: ")
		// printaddr(curr_key_ref)
		// printstr("Key:         ")
		// printaddr(*curr_key_ref)  // compiles only if key.deref is not None

		let i int
		i = 0

		let curr_key K
		curr_key = dict.keys[index]

		// return -1 only if there's no more space
		while curr_key != K::null
			if curr_key == key
				return index
			end

			index = index + 7
			if index >= cap
				index = index % cap
			end
			curr_key = dict.keys[index]

			i = i + 1
			if dict.used < i
				return 0-1
			end
		end
		return index
	end

	fn _getref: &Dict K V self, K key -> &V
		let index int
		index = Dict K V.index(self, key)
		if index < 0
			return V:null
		end

		key = self.keys[index]
		if key == K::null
			return V:null  // null ptr to V
		end

		return &self.values[index]
	end

	fn _getitem: &Dict K V self, K key -> V
		let ptr &V
		ptr = &self[key]
		if ptr == 0
			return V::null  // null value of V
		end
		return *ptr
	end

	fn _setitem: &Dict K V self, V value, K key
		let index int
		index = Dict K V.index(self, key)
		if index < 0
			return
		end

		let key_ptr &K
		key_ptr = &self.keys[index]
		if *key_ptr == K::null
			*key_ptr = key
			self.used = self.used + 1
		end

		self.values[index] = value
	end
end
